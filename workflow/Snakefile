# Load modules
import glob
import os
import subprocess
import pdb

# Get the date
from datetime import datetime
i = datetime.now()
TIME = i.strftime('%Y-%m-%d')

# Specify config file
configfile: "workflow/config.yml"

# Parse config.yml file
SCRATCH = config['dir']['scratch']
OUT = config['dir']['out']
QUERY = config['query']['ALL']
REFFILE = config['reference']['hg19']['vcf']
POPFILE = config['reference']['hg19']['subpops']
MAPFILE = config['reference']['hg19']['genmap']
CODE = config['dir']['code']
PHASE_THREADS = config['phase']['threads']
RF_GEN = config['rfmix']['generations']
RF_THREADS = config['rfmix']['threads']
RF_REANALYZE = config['rfmix']['reanalyze_reference']
RF_REFPOPS = config['rfmix']['ref_pops']
RF_POPNAME = config['rfmix']['pop_names']
CHROMS = config['chroms']
PCNUM = config['admixMapping_PCnum']


# If set to true, the reference populations will be reanalyzed.  Useful for when reference populations are themselves admixed.
if RF_REANALYZE == 'true':
    RF_REANALYZE = '--reanalyze-reference -e 6'
else:
    RF_REANALYZE = ''

# Set default internal variables
PHASE_MAP = "accessory/Shapeit4_genetic_map"
NEW_POPFILE = "accessory/Population_Map_File.txt"

INDS = []
with open(QUERY + ".fam", 'r') as pop_file:
    for line in pop_file:
        ind = line.strip().split()[0]
        INDS.append(ind)

BASE = os.path.basename(QUERY)

if CHROMS == 'all':
    CHROMS = [str(x) for x in range(1, 23)]

# Make subdirectories
if not os.path.exists("vcfs"):
    os.mkdir("vcfs")
if not os.path.exists("bcfs"):
    os.mkdir("bcfs")
if not os.path.exists("rfmix"):
    os.mkdir("rfmix")
if not os.path.exists("accessory"):
    os.mkdir("accessory")
if not os.path.exists("beds"):
    os.mkdir("beds")
if not os.path.exists("karyograms"):
    os.mkdir("karyograms")
if not os.path.exists("plink"):
    os.mkdir("plink")
if not os.path.exists("OandE"):
    os.mkdir("OandE")

localrules: all, phase_map, pop_map

RFMIX_OUT = expand(f"rfmix/{BASE}.chr{{chrom}}.rfmix.Q", chrom=CHROMS)

rule all:
    input:
        expand(f"bcfs/{BASE}.chr{{chrom}}.phz.bcf", chrom=CHROMS),
        expand(f"rfmix/{BASE}.chr{{chrom}}.rfmix.Q", chrom=CHROMS),
#         expand(f"beds/{{ind}}_A.bed", ind=INDS),
#         expand(f"karyograms/{{ind}}_karyo.png", ind=INDS),
        "plink/ped_key.txt",
        f"{BASE}.admixMap.txt"

rule clean:
    shell:
        "rm vcfs/*; rm bcfs/*; rm rfmix/*; rm beds/*; rm karyograms/*"

rule parse_plink:
    input: f"{QUERY}.bed"
    output: f"vcfs/{BASE}.chr{{chrom}}.vcf"
    shell: f"module load plink/1.90b6.10; plink --bfile {QUERY} --chr {{wildcards.chrom}} --out vcfs/{BASE}.chr{{wildcards.chrom}} --recode vcf-iid"

rule compress_and_index:
    input: f"vcfs/{BASE}.chr{{chrom}}.vcf"
    output: f"vcfs/{BASE}.chr{{chrom}}.vcf.gz"
    shell: f"module load htslib/1.6; bgzip vcfs/{BASE}.chr{{wildcards.chrom}}.vcf; tabix -p vcf vcfs/{BASE}.chr{{wildcards.chrom}}.vcf.gz"

rule phase_map:
    input: MAPFILE
    output: "accessory/Shapeit4_genetic_map{chrom}"
    shell: "python3.6 scripts/phase_map.py -i {input}"

rule phase:
    input:
        f"vcfs/{BASE}.chr{{chrom}}.vcf.gz",
        "accessory/Shapeit4_genetic_map{chrom}"
    output: f"bcfs/{BASE}.chr{{chrom}}.phz.bcf"
    shell:
        f"module load bcftools/1.9; shapeit4 -I {{input}} -M {PHASE_MAP}{{wildcards.chrom}} -O bcfs/{BASE}.chr{{wildcards.chrom}}.phz.bcf --region {{wildcards.chrom}} --pbwt-depth {config['phase']['pbwt_depth']} -T {PHASE_THREADS} --log bcfs/{BASE}.chr{{wildcards.chrom}}.phz.bcf.log && bcftools index bcfs/{BASE}.chr{{wildcards.chrom}}.phz.bcf"

rule pop_map:
    input: POPFILE
    output: "accessory/Population_Map_File.txt"
    shell: f"python3.6 scripts/pop_map.py -i {{input}} -p {RF_REFPOPS} -n {RF_POPNAME} -o {NEW_POPFILE}"

rule infer_ancestry:
    input: f"bcfs/{BASE}.chr{{chrom}}.phz.bcf", "accessory/Population_Map_File.txt"
    output: f"rfmix/{BASE}.chr{{chrom}}.rfmix.Q"
    shell:
        f"module load bcftools/1.9; rfmix -f {{input[0]}} -r {REFFILE} -m {{input[1]}} -g {MAPFILE} -o rfmix/{BASE}.chr{{wildcards.chrom}} --chromosome={{wildcards.chrom}} --n-threads={RF_THREADS} -G {RF_GEN} {RF_REANALYZE}"

rule make_hap_beds:
    input: RFMIX_OUT
    output: "beds/{ind}_A.bed"
    shell:
        f"source activate py27; python scripts/msp2bed.py --rfmix rfmix/{BASE} --ind {{wildcards.ind}} --out beds/{{wildcards.ind}}"

rule plot_karyograms:
    input: "beds/{ind}_A.bed"
    output: "karyograms/{ind}_karyo.png"
    shell:
        f"source activate py27; python scripts/plot_karyogram.py --bed_a beds/{{wildcards.ind}}_A.bed --bed_b beds/{{wildcards.ind}}_B.bed --ind {{wildcards.ind}} --centromeres accessory/centromeres_hg19.bed --pop_order beds/pop_order.txt --out karyograms/{{wildcards.ind}}_karyo.png"

rule make_hap_beds_wQual:
    input: RFMIX_OUT
    output: "beds/{ind}_A_Qual.bed"
    shell:
        f"source activate py27; python scripts/msp2bed.py --rfmix rfmix/{BASE} --ind {{wildcards.ind}} --out beds/{{wildcards.ind}} --Qual"

rule calcPCA:
    input: f"{QUERY}.bed"
    output: f"plink/{BASE}.eigenvec"
    shell:
        f"module load plink/1.90b6.10; plink --bfile {QUERY} --pca --out plink/{BASE}"

rule make_anc_peds:
    input: RFMIX_OUT
    output: f"plink/ped_key.txt"
    shell:
        f"source activate py27; module load plink/1.90b6.10; python scripts/rfmix2plink_tped.py --rfmix rfmix/{BASE} --fam {QUERY}.fam --out {BASE} --transpose --snps"

rule admixMap:
    input: "plink/ped_key.txt", f"plink/{BASE}.eigenvec"
    output: f"{BASE}.admixMap.txt"
    shell:
        f"module load R/3.6.0; Rscript scripts/admixMap.R {{input[0]}} {{input[1]}} {BASE}.admixMap.txt {PCNUM}"