# Load modules
import glob
import os
import subprocess
import pdb
import shutil

# Get the date
from datetime import datetime
i = datetime.now()
TIME = i.strftime('%Y-%m-%d')

# Specify config file
configfile: "workflow/config.yml"

# Parse config.yml file
SCRATCH = config['dir']['scratch']
OUT = config['dir']['out']
QUERY = config['query']
RF_GEN = config['rfmix']['generations']
RF_REANALYZE = config['rfmix']['reanalyze_reference']
RF_REFPOPS = config['rfmix']['ref_pops']
RF_POPNAME = config['rfmix']['pop_names']
CHROMS = config['chroms']
PCNUM = config['admixMapping_PCnum']
REFFILE = config['reference']['vcf']
POPFILE = config['reference']['subpops']
MAPFILE = config['reference']['genmap']

if config['reference']['phased_bcf'] == 'none':
    REFBCF=f"{os.getcwd()}/bcfs/{os.path.basename(REFFILE).strip('.gz').strip('.vcf').strip('.bcf')}.subset.bcf"
elif os.path.exists(config['reference']['phased_bcf']):
    REFBCF=config['reference']['phased_bcf']
else:
    print("Did not find phased BCF file at " + config['reference']['phased_bcf'])

if config['singularity']['use_singularity'] == 'true' and config['singularity']['image'] != "none":
    bind_paths = ",".join(set([os.path.dirname(x) for x in [QUERY, REFFILE, POPFILE, MAPFILE, REFBCF]]))
    CMD_PREFIX = f"set +u; {config['singularity']['module']}; singularity exec --bind input/,{bind_paths},{os.getcwd()} {config['singularity']['image']}"
    #He has to specify version of singularity...
    CODE = config['singularity']['code']
else:
    CMD_PREFIX = config['cmd_prefix']
    CODE = config['dir']['code']

BASE = config['outname']  # Base prefix used for naming files is set as basename of
INPUT = f"input/{BASE}"

# If set to true, the reference populations will be reanalyzed.  Useful for when reference populations are themselves admixed.
if RF_REANALYZE == 'true':
    RF_REANALYZE = '--reanalyze-reference -e 6'
else:
    RF_REANALYZE = ''

# Set default internal variables
PHASE_MAP = "accessory/Shapeit4_genetic_map"
NEW_POPFILE = "accessory/Population_Map_File.txt"

INDS = []
with open(QUERY + ".fam", 'r') as pop_file:
    for line in pop_file:
        ind = line.strip().split()[0]
        INDS.append(ind)

if CHROMS == 'all':
    CHROMS = [str(x) for x in range(1, 23)]

# Make subdirectories
dirs = ["input", "vcfs", "bcfs", "rfmix", "accessory", "beds", "karyograms", "plink", "OandE"]
for directory in dirs:
    if not os.path.exists(directory): os.mkdir(directory)

localrules: all, phase_map, pop_map, clean

RFMIX_OUT = expand(f"rfmix/{BASE}.chr{{chrom}}.rfmix.Q", chrom=CHROMS)

def get_prep_RefVCF_input(wildcards):
    input = ["accessory/Population_Map_File.txt"]
    if config['reference']['phased_bcf'] == "none": input.append(REFFILE)
    else: input.append(REFBCF)
    return(input)

rule all:
    input:
        f"{BASE}-rulegraph.png",
        f"{INPUT}.bed",
        f"bcfs/{os.path.basename(REFBCF)}",
        expand(f"bcfs/{BASE}.chr{{chrom}}.phz.bcf", chrom=CHROMS),
        expand(f"rfmix/{BASE}.chr{{chrom}}.rfmix.Q", chrom=CHROMS),
        f"{BASE}-AncestryInference-report.pdf"
#         expand(f"beds/{{ind}}_A.bed", ind=INDS),
#         expand(f"karyograms/{{ind}}_karyo.png", ind=INDS),

rule clean:
    shell:
        "rm vcfs/*; rm bcfs/*; rm rfmix/*"

rule make_rulegraph:
    output: f"{BASE}-rulegraph.png"
    params: mod_cmd = CMD_PREFIX.replace(f"set +u; {config['singularity']['module']};", "")
    shell: f"{config['singularity']['module']}; snakemake --rulegraph --configfile workflow/config.yml | {{params.mod_cmd}} dot -Tpng > {{output}}"

rule QCcombine_query:
    input: f"{QUERY}.bed"
    output: f"{INPUT}.bed"
    params:
        tvm1 = config['QC']['vm1'], tgm = config['QC']['gm'], tvm2 = config['QC']['vm2'],
        hwe = config['QC']['hwe'], maf = config['QC']['maf'], mbs = config['QC']['mbs']
    run:
        if config['perform_QC'] == 'true':
            shell(f"{CMD_PREFIX} python {CODE}/QC.py -i {{input}} -d input/ -o {BASE} -t {{threads}} -p plink -tvm1 {{params.tvm1}} -tgm {{params.tgm}} -tvm2 {{params.tvm2}} -hwe {{params.hwe}} -mbs {{params.mbs}} -maf {{params.maf}}")
        else:
            shell(f"{CMD_PREFIX} plink --bfile {QUERY} --make-bed --out {INPUT}")

rule parse_plink:
    input: f"{INPUT}.bed"
    output: f"vcfs/{BASE}.chr{{chrom}}.vcf"
    shell: f"{CMD_PREFIX} plink --bfile {INPUT} --chr {{wildcards.chrom}} --keep-allele-order --out vcfs/{BASE}.chr{{wildcards.chrom}} --recode vcf-iid"

rule compress_and_index:
    input: f"vcfs/{BASE}.chr{{chrom}}.vcf"
    output: f"vcfs/{BASE}.chr{{chrom}}.vcf.gz"
    shell: f"{CMD_PREFIX} bgzip {{input}}; {CMD_PREFIX} tabix -p vcf {{output}}"

rule phase_map:
    input: MAPFILE
    output: "accessory/Shapeit4_genetic_map{chrom}"
    shell: "{CMD_PREFIX} python3.6 {CODE}/phase_map.py -i {input}"

rule pop_map:
    input: POPFILE
    output: "accessory/Population_Map_File.txt"
    shell: f"{CMD_PREFIX} python3.6 {CODE}/pop_map.py -i {{input}} -p {RF_REFPOPS} -n {RF_POPNAME} -o {NEW_POPFILE}"

rule prep_RefVCF:
    input: get_prep_RefVCF_input
    output: f"bcfs/{os.path.basename(REFBCF)}"
    threads: int(config['bcftools']['threads'])
    run:
        if config['reference']['phased_bcf'] == 'none':
            with open('prep_RefVCF.sh', 'w') as temp_sh:
                temp_sh.write(f"awk \'{{print $1}}\' {input[0]} | bcftools view -S - {input[1]} -Ob -o {output} --force-samples --threads {threads}; bcftools index {output} --threads {threads}\n")
            shell("{CMD_PREFIX} sh prep_RefVCF.sh")
        else:
            shutil.copy(REFBCF, f"bcfs/{os.path.basename(REFBCF)}")
            shell(f"{CMD_PREFIX} bcftools index {{output}} --threads {config['bcftools']['threads']}")


rule phase:
    input:
        f"vcfs/{BASE}.chr{{chrom}}.vcf.gz",
        "accessory/Shapeit4_genetic_map{chrom}",
        f"bcfs/{os.path.basename(REFBCF)}"
    output: f"bcfs/{BASE}.chr{{chrom}}.phz.bcf"
    threads: int(config['phase']['threads'])
    run:
        if config['phase']['sequence_data'] == 'true':
            shell(f"{CMD_PREFIX} shapeit4 -I {{input[0]}} -M {PHASE_MAP}{{wildcards.chrom}} -O {{output}} --region {{wildcards.chrom}} --sequencing -T {{threads}} --reference {{input[2]}} --log bcfs/{BASE}.chr{{wildcards.chrom}}.phz.bcf.log && {CMD_PREFIX} bcftools index {{output}} --threads {{threads}}")
        else:
            shell(f"{CMD_PREFIX} shapeit4 -I {{input[0]}} -M {PHASE_MAP}{{wildcards.chrom}} -O {{output}} --region {{wildcards.chrom}} --pbwt-depth {config['phase']['pbwt_depth']} -T {{threads}} --reference {{input[2]}} --log bcfs/{BASE}.chr{{wildcards.chrom}}.phz.bcf.log && {CMD_PREFIX} bcftools index {{output}} --threads {{threads}}")

rule infer_ancestry:
    input: f"bcfs/{BASE}.chr{{chrom}}.phz.bcf", "accessory/Population_Map_File.txt"
    output: f"rfmix/{BASE}.chr{{chrom}}.rfmix.Q"
    threads: int(config['rfmix']['threads'])
    shell:
        f"{CMD_PREFIX} rfmix -f {{input[0]}} -r {REFBCF} -m {{input[1]}} -g {MAPFILE} -s {config['rfmix']['window_size']} -o rfmix/{BASE}.chr{{wildcards.chrom}} --chromosome={{wildcards.chrom}} --n-threads={{threads}} -G {RF_GEN} {RF_REANALYZE}"

rule make_hap_beds:
    input: RFMIX_OUT
    output: "beds/{ind}_A.bed"
    run:
        with open(f"{wildcards.ind}_A.sh", 'w') as temp_sh:
            temp_sh.write(f"source activate py27; python {CODE}/msp2bed.py --rfmix rfmix/{BASE} --ind {wildcards.ind} --out beds/{wildcards.ind}\n")
        shell(f"{CMD_PREFIX} {{wildcards.ind}}_A.sh; rm {{wildcards.ind}}_A.sh")

rule plot_karyograms:
    input: "beds/{ind}_A.bed"
    output: "karyograms/{ind}_karyo.png"
    shell:
        f"{CMD_PREFIX} source activate py27; python {CODE}/plot_karyogram.py --bed_a beds/{{wildcards.ind}}_A.bed --bed_b beds/{{wildcards.ind}}_B.bed --ind {{wildcards.ind}} --centromeres accessory/centromeres_hg19.bed --pop_order beds/pop_order.txt --out karyograms/{{wildcards.ind}}_karyo.png"

rule make_hap_beds_wQual:
    input: RFMIX_OUT
    output: "beds/{ind}_A_Qual.bed"
    run:
        with open(f"{wildcards.ind}_A.sh", 'w') as temp_sh:
            temp_sh.write(f"source activate py27; python {CODE}/msp2bed.py --rfmix rfmix/{BASE} --ind {wildcards.ind} --out beds/{wildcards.ind} --Qual\n")
        shell(f"{CMD_PREFIX} {{wildcards.ind}}_A.sh; rm {{wildcards.ind}}_A.sh")

#TODO: Finish make_report for AncInf
rule make_report:
    input: expand(f"rfmix/{BASE}.chr{{chrom}}.rfmix.Q", chrom=CHROMS), f"{BASE}-rulegraph.png"
    output: f"{BASE}-AncestryInference-report.pdf"
    run:
        if not os.path.exists("chrom_plots"): os.mkdir("chrom_plots")
        with open("scripts/gather_report_data.sh", 'w') as report_cmds:
            report_cmds.write(f"bcftools query -l {REFBCF} | grep -f - accessory/Population_Map_File.txt > accessory/realized_ref_samples.txt\n")
            # report_cmds.write("wc -l */tmp/*txt | grep -v -e scripts -e total | awk \'{split($2,a,\"/\"); split(a[3],b,\".\"); split(b[1],c,\"-\"); print c[1],b[3],$1}\' > accessory/filter.stats\n")
            # report_cmds.write("wc -l */tmp/*alleles_IDs.bim | grep -v -e total | awk \'{split($2,a,\"/\"); split(a[3],b,\".\"); split(b[1],c,\"_\"); printf(\"%s raw %s\\n\", c[1],$1)}\' >> accessory/filter.stats\n")
            # report_cmds.write("grep -e NS OandE/FixRef.rawdata*err | grep -v Number | cut -d \"=\" -f 2 | awk \'{split($1,a,\".\"); print a[1],$2,$3,$4}\' | sed \'s/ref /ref-/\' | sed \'s/fixed /fixed-/\' | sed \'s/%//\' > accessory/FixRef.stats\n")
            # report_cmds.write("zcat " + REFVCF +  " | vawk \'{split(I$CAF,a,\",\"); if($1==20) print $1,$2,$3,a[1]}\' | awk \'{{if(NF==4) print $0}}\' > accessory/ref_freqs.txt\n")
            # report_cmds.write("zgrep -v \"#\" */*chr20.vcf.gz | shuf -n 100000 |  vawk \'{print $1,$2,$3, S$*$GT}\' | tr \"/\" \" \" | tr \":\" \" \" > accessory/dat_freqs.txt")
            report_line = f"echo \'rmarkdown::render(\"scripts/AncInf_report.Rmd\", output_file=\"{BASE}-AncestryInference-report.pdf\", " \
                          f"params=list(rfmix_dir=\"rfmix\", " \
                          f"fam_file=\"{QUERY}.fam\", " \
                          f"samp_file=\"accessory/realized_ref_samples.txt\", " \
                          f"subpop_file=\"{POPFILE}\", " \
                          f"rulegraph_file=\"{BASE}-rulegraph.png\", " \
                          f"config_file=\"workflow/config.yml\"))\' | R --vanilla"
            report_cmds.write(report_line)
        shell(f"{CMD_PREFIX} sh scripts/gather_report_data.sh; mv scripts/{BASE}-AncestryInference-report.pdf {BASE}-AncestryInference-report.pdf")